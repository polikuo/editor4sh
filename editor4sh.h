// author polikuo 2020
// generated by Fast Light User Interface Designer (fluid) version 1.0400

#ifndef editor4sh_h
#define editor4sh_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Text_Editor.H>
#include <FL/Fl_Menu_Bar.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_File_Chooser.H>
#include<cstdlib>
#include <errno.h>
#include "config.h"
// busybox
// List of known busybox commands...
// https://busybox.net/downloads/BusyBox.html

const char *applets[] = {
  "acpid",
  "addgroup",
  "adduser",
  "adjtimex",
  "ar",
  "arp",
  "arping",
  "ash",
  "awk",
  "basename",
  "beep",
  "blkid",
  "brctl",
  "bunzip2",
  "busybox",
  "bzcat",
  "bzip2",
  "cal",
  "cat",
  "catv",
  "chat",
  "chattr",
  "chgrp",
  "chmod",
  "chown",
  "chpasswd",
  "chpst",
  "chroot",
  "chrt",
  "chvt",
  "cksum",
  "clear",
  "cmp",
  "comm",
  "cp",
  "cpio",
  "crond",
  "crontab",
  "cryptpw",
  "cut",
  "date",
  "dc",
  "dd",
  "deallocvt",
  "delgroup",
  "deluser",
  "depmod",
  "devmem",
  "df",
  "dhcprelay",
  "diff",
  "dirname",
  "dmesg",
  "dnsd",
  "dnsdomainname",
  "dos2unix",
  "dpkg",
  "du",
  "dumpkmap",
  "dumpleases",
  "echo",
  "ed",
  "egrep",
  "eject",
  "env",
  "envdir",
  "envuidgid",
  "ether-wake",
  "expand",
  "expr",
  "fakeidentd",
  "false",
  "fbset",
  "fbsplash",
  "fdflush",
  "fdformat",
  "fdisk",
  "fgconsole",
  "fgrep",
  "find",
  "findfs",
  "flash_lock",
  "flash_unlock",
  "flock",
  "fold",
  "free",
  "freeramdisk",
  "fsck",
  "fsck.minix",
  "fsync",
  "ftpd",
  "ftpget",
  "ftpput",
  "fuser",
  "getopt",
  "getty",
  "grep",
  "gunzip",
  "gzip",
  "halt",
  "hd",
  "hdparm",
  "head",
  "hexdump",
  "hostid",
  "hostname",
  "httpd",
  "hush",
  "hwclock",
  "id",
  "ifconfig",
  "ifdown",
  "ifenslave",
  "ifplugd",
  "ifup",
  "inetd",
  "init",
  "inotifyd",
  "insmod",
  "install",
  "ionice",
  "ip",
  "ipaddr",
  "ipcalc",
  "ipcrm",
  "ipcs",
  "iplink",
  "iproute",
  "iprule",
  "iptunnel",
  "kbd_mode",
  "kill",
  "killall",
  "killall5",
  "klogd",
  "last",
  "length",
  "less",
  "linux32",
  "linux64",
  "linuxrc",
  "ln",
  "loadfont",
  "loadkmap",
  "logger",
  "login",
  "logname",
  "logread",
  "losetup",
  "lpd",
  "lpq",
  "lpr",
  "ls",
  "lsattr",
  "lsmod",
  "lsof",
  "lzcat",
  "lzma",
  "lzmacat",
  "lzop",
  "lzopcat",
  "makemime",
  "man",
  "md5sum",
  "mdev",
  "mesg",
  "microcom",
  "mkdir",
  "mkdosfs",
  "mkfifo",
  "mkfs.minix",
  "mkfs.vfat",
  "mknod",
  "mkpasswd",
  "mkswap",
  "mktemp",
  "modinfo",
  "modprobe",
  "more",
  "mount",
  "mountpoint",
  "mt",
  "mv",
  "nameif",
  "nbd-client",
  "nc",
  "netstat",
  "nice",
  "nmeter",
  "nohup",
  "nslookup",
  "ntpd",
  "od",
  "openvt",
  "passwd",
  "patch",
  "pgrep",
  "pidof",
  "ping",
  "ping6",
  "pipe_progress",
  "pivot_root",
  "pkill",
  "popmaildir",
  "poweroff",
  "printenv",
  "printf",
  "ps",
  "pscan",
  "pstree",
  "pwd",
  "raidautorun",
  "rdate",
  "rdev",
  "readlink",
  "readprofile",
  "realpath",
  "reboot",
  "reformime",
  "renice",
  "reset",
  "resize",
  "rev",
  "rm",
  "rmdir",
  "rmmod",
  "route",
  "rpm",
  "rpm2cpio",
  "rtcwake",
  "run-parts",
  "runlevel",
  "runsv",
  "runsvdir",
  "rx",
  "script",
  "scriptreplay",
  "sed",
  "sendmail",
  "seq",
  "setarch",
  "setconsole",
  "setfont",
  "setkeycodes",
  "setlogcons",
  "setsid",
  "setuidgid",
  "sh",
  "sha1sum",
  "sha256sum",
  "sha512sum",
  "showkey",
  "slattach",
  "sleep",
  "softlimit",
  "sort",
  "split",
  "start-stop-daemon",
  "stat",
  "strings",
  "stty",
  "su",
  "sulogin",
  "sum",
  "sv",
  "svlogd",
  "swapoff",
  "swapon",
  "switch_root",
  "sync",
  "sysctl",
  "syslogd",
  "tac",
  "tail",
  "tar",
  "taskset",
  "tcpsvd",
  "tee",
  "telnet",
  "telnetd",
  "test",
  "tftp",
  "tftpd",
  "time",
  "timeout",
  "top",
  "touch",
  "tr",
  "traceroute",
  "true",
  "tty",
  "ttysize",
  "udhcpc",
  "udhcpd",
  "udpsvd",
  "umount",
  "uname",
  "uncompress",
  "unexpand",
  "uniq",
  "unix2dos",
  "unlink",
  "unlzma",
  "unlzop",
  "unxz",
  "unzip",
  "uptime",
  "usleep",
  "uudecode",
  "uuencode",
  "vconfig",
  "vi",
  "vlock",
  "volname",
  "watch",
  "watchdog",
  "wc",
  "wget",
  "which",
  "who",
  "whoami",
  "xargs",
  "xz",
  "xzcat",
  "yes",
  "zcat",
  "zcip"
};
// bourne_builtins
// List of known bourne shell built-in functions...
//   $ help
// List of known bourne shell conditional statements...
const char *bourne_function[] = {
  "alias",
  "bg",
  "break",
  "cd",
  "chdir",
  "command",
  "continue",
  "echo",
  "eval",
  "exec",
  "exit",
  "export",
  "false",
  "fg",
  "getopts",
  "hash",
  "help",
  "history",
  "jobs",
  "kill",
  "let",
  "local",
  "printf",
  "pwd",
  "read",
  "readonly",
  "return",
  "set",
  "shift",
  "source",
  "test",
  "times",
  "trap",
  "true",
  "type",
  "ulimit",
  "umask",
  "unalias",
  "unset",
  "wait"
};
const char *bourne_keys[] = {
  "case",
  "do",
  "done",
  "elif",
  "else",
  "esac",
  "fi",
  "for",
  "if",
  "in",
  "then",
  "until",
  "while",
};
// bourne_again_builtins
// List of known bourne again shell built-in functions...
//   $ compgen -b
// List of known bourne again shell conditional statements...
//   $ compgen -k
const char *bourne_again_function[] = {
  "alias",
  "bg",
  "bind",
  "break",
  "builtin",
  "caller",
  "cd",
  "command",
  "compgen",
  "complete",
  "compopt",
  "continue",
  "declare",
  "dirs",
  "disown",
  "echo",
  "enable",
  "eval",
  "exec",
  "exit",
  "export",
  "false",
  "fc",
  "fg",
  "getopts",
  "hash",
  "help",
  "history",
  "jobs",
  "kill",
  "let",
  "local",
  "logout",
  "mapfile",
  "popd",
  "printf",
  "pushd",
  "pwd",
  "read",
  "readarray",
  "readonly",
  "return",
  "set",
  "shift",
  "shopt",
  "source",
  "suspend",
  "test",
  "times",
  "trap",
  "true",
  "type",
  "typeset",
  "ulimit",
  "umask",
  "unalias",
  "unset",
  "wait"
};
const char *bourne_again_keys[] = {
  "case",
  "do",
  "done",
  "elif",
  "else",
  "esac",
  "fi",
  "for",
  "function",
  "if",
  "in",
  "select",
  "then",
  "time",
  "until",
  "while"
};
struct syntax {
  bool cm; // #comment 35
  bool es; // \escapes 92
  bool ds; // $dolor_sign 36
  bool bq; // `back quote command substitution` 96
  bool sq; // 'single quote' 39
  bool dq; // "double quote" 34
  int pssp; // previous scan starting position
  int cs; // $(command substitution)
  int p; // (parentheses) 40 41
  int se; // ${shell expansion}, ds must be true
  int arith; // arithmetic syntax $((X+Y))
};
void assign_style();
void buffer_init();
void chk_bash();
void shell_cb(int choice);
void shebang(int restyle);
int check_saved();
void new_cb();
void save_file(const char *newfile);
void saveas_cb();
void save_cb();
void open_cb();
void load_file(char *newfile);
void style_unfinished_cb(int, void*);
int busybox(char *textbuff, char *scanned_text);
int bourne_builtins(char *textbuff, char *scanned_text);
int is_special(char ascii);
void disable_color();
void auto_indent_switch();
void auto_indent_cb(int lsp, int pos, char *line);
void stylebuf_init();
void color_cb();
void exec_cb();
int compare_keywords(char *text, const char *keys[], size_t elements, char *result, char ascii);
void setvars(char *buff_copy, int pos);
void scan_forward(char *buff_copy, int bufflen, int pos);
void modification_cb(int pos, int nInserted, int nDeleted, int nRestyled, const char *deletedText, void *cbArg);
void close_cb(Fl_Widget*, void* v);
int arg_parser(int argc, char **argv, int &i);
void find_dialog();
int font_dialog();
void find_again_dialog();
#include <FL/Fl_Double_Window.H>
extern Fl_Double_Window *replace_dialog_window;
#include <FL/Fl_Input.H>
extern Fl_Input *text_in_find;
extern Fl_Input *text_in_replace;
#include <FL/Fl_Button.H>
extern Fl_Button *replace_all_btn;
#include <FL/Fl_Return_Button.H>
extern Fl_Return_Button *replace_next_btn;
extern Fl_Button *RD_cancel_btn;
void replace_dialog();
void replace_next_cb();
void replace_again_cb();
void replace_all_cb();
void close_dialog(Fl_Widget*, void* v);
void fs_cb(int s);
extern Fl_Double_Window *win;
#include <FL/Fl_Text_Editor.H>
extern Fl_Text_Editor *edit;
#include <FL/Fl_Menu_Bar.H>
extern Fl_Menu_Bar *the_menu_bar;
extern Fl_Menu_Item menu_the_menu_bar[];
#define file_menu (menu_the_menu_bar+0)
#define new_bt (menu_the_menu_bar+1)
#define open (menu_the_menu_bar+2)
#define save (menu_the_menu_bar+3)
#define saveas (menu_the_menu_bar+4)
#define shell_menu (menu_the_menu_bar+6)
#define sh (menu_the_menu_bar+7)
#define bash (menu_the_menu_bar+8)
#define other (menu_the_menu_bar+9)
#define search_menu (menu_the_menu_bar+11)
#define find_btn (menu_the_menu_bar+12)
#define find_again_btn (menu_the_menu_bar+13)
#define replace_btn (menu_the_menu_bar+14)
#define replace_again_btn (menu_the_menu_bar+15)
#define fs_sub (menu_the_menu_bar+17)
#define fs14 (menu_the_menu_bar+18)
#define fs20 (menu_the_menu_bar+19)
#define fsc (menu_the_menu_bar+20)
#define color_switch (menu_the_menu_bar+22)
#define indent_switch (menu_the_menu_bar+23)
#define executable_switch (menu_the_menu_bar+24)
#endif
