// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "editor.h"
char const *SHELL = "#!/bin/sh\n"; 
char filename[FL_PATH_MAX], title[FL_PATH_MAX]; 
Fl_Text_Buffer *buff = new Fl_Text_Buffer(); 

void save_file(const char *newfile) {
  // fl_alert("Saving to file %s", newfile);
  if (buff->savefile(newfile)) {
    fl_alert("Error writing to file \'%s\':\n%s.", newfile, strerror(errno));
  } else {
    strcpy(filename, newfile);
    strcpy(title, newfile);
    win->label(title);
    char chmod[FL_PATH_MAX + 9];
    sprintf(chmod, "chmod +x %s", newfile);
    system(chmod);
  }
}

void shebang(void) {
  int firstline, current_pos;
  current_pos = edit->insert_position();
  // search_forward(int startPos, const char *searchString, int *foundPos, int matchCase = 0)
  int found = buff->search_forward(0, "\n", &firstline);
  if (found) {
    buff->select(0, firstline+1);
    buff->remove_selection();
    buff->insert(0, SHELL);
    edit->insert_position(current_pos + strlen(SHELL) - firstline - 1);
    edit->show_insert_position();
  }
  
  /*if (found) {
    // Found a match; update the position and replace text...
    textbuf->select(pos, pos+strlen(find));
    textbuf->remove_selection();
    textbuf->insert(pos, replace);
    textbuf->select(pos, pos+strlen(replace));
    e->editor->insert_position(pos+strlen(replace));
    e->editor->show_insert_position();
  }*/
}

void buffer_init(void) {
  // attach buffer to  editor
  buff->text(SHELL);
  edit->buffer(buff);
  edit->insert_position(10);
  edit->show_insert_position();
}

void save_cb(void) {
  if (filename[0] == '\0') {
    // No filename
    saveas_cb();
    return;
  } else {
    save_file(filename);
  }
}

void saveas_cb(void) {
  char *sfa;
  sfa = fl_file_chooser("Save File As ?", "*", filename);
  if(sfa != NULL) save_file(sfa);
}

void open_cb() {
  char *newfile = fl_file_chooser("Open File ?", "*", filename);
  if (newfile != NULL) load_file(newfile);
}

void load_file(char *newfile) {
  int lf;
  lf = buff->loadfile(newfile);
  if (lf) {
    fl_alert("Error while loading file \'%s\':\n%s.", newfile, strerror(errno));
  } else {
    strcpy(filename, newfile);
    strcpy(title, newfile);
    win->label(title);
  }
}

Fl_Double_Window *win=(Fl_Double_Window *)0;

Fl_Text_Editor *edit=(Fl_Text_Editor *)0;

Fl_Menu_Bar *menu_bar=(Fl_Menu_Bar *)0;

static void cb_new_bt(Fl_Menu_*, void*) {
  buff->text(SHELL);
  strcpy(filename, "\0");
  strcpy(title, "\0");
  win->label(title);
}

static void cb_open(Fl_Menu_*, void*) {
  open_cb();
}

static void cb_save(Fl_Menu_*, void*) {
  save_cb();
}

static void cb_saveas(Fl_Menu_*, void*) {
  saveas_cb();
}

static void cb_sh(Fl_Menu_*, void*) {
  SHELL = "#!/bin/sh\n";
  shebang();
}

static void cb_bash(Fl_Menu_*, void*) {
  SHELL = "#!/usr/bin/env bash\n";
  shebang();
}

Fl_Menu_Item menu_menu_bar[] = {
 {"&File", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"&New File", 0x4006e,  (Fl_Callback*)cb_new_bt, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"&Open", 0x4006f,  (Fl_Callback*)cb_open, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"&Save", 0x40073,  (Fl_Callback*)cb_save, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Save &As", 0x50073,  (Fl_Callback*)cb_saveas, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"&Shell", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"POSIX sh", 0x80073,  (Fl_Callback*)cb_sh, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"ENV bash", 0x80062,  (Fl_Callback*)cb_bash, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

int main(int argc, char **argv) {
  { win = new Fl_Double_Window(425, 320);
    win->box(FL_PLASTIC_UP_BOX);
    { edit = new Fl_Text_Editor(1, 29, 424, 288);
      edit->box(FL_PLASTIC_DOWN_FRAME);
      edit->textfont(4);
      edit->textsize(20);
      Fl_Group::current()->resizable(edit);
    } // Fl_Text_Editor* edit
    { menu_bar = new Fl_Menu_Bar(0, 0, 425, 30);
      menu_bar->box(FL_PLASTIC_UP_BOX);
      menu_bar->down_box(FL_PLASTIC_DOWN_BOX);
      menu_bar->menu(menu_menu_bar);
    } // Fl_Menu_Bar* menu_bar
    win->end();
  } // Fl_Double_Window* win
  // editor init
  win->label(title);
  buffer_init();
  win->show(argc, argv);
  return Fl::run();
}
